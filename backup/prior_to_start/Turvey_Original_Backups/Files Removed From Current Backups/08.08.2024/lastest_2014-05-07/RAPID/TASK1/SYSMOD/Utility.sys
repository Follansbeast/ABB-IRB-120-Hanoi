MODULE Utility(SYSMODULE,NOSTEPIN)
    !*****************************************************
    !Module Name: Utility
    !Version:     1.0
    !Description: The program utility tool
    !Date:        2014/5/7
    !Author:      Gavin Zhang
    !*****************************************************
    VAR socketdev client_socket;
    VAR string received_string;
    PERS string CCD_string;
    VAR bool keep_listening := TRUE;
    VAR socketdev socket1;
    VAR string sPartx;
    VAR string sParty;
    VAR bool Ok;
    VAR string sPartangle;
    PERS num offsX:=0;
    PERS num offsY:=0;
    PERS num nAngle:=0;
    CONST num WZR:=10;
    CONST num WZH:=20;
    PERS pos poshome;
    PERS wzstationary wzrobota1:=[1];
    PERS pos PosHome1;
    PERS pos PosHome2;
    
   PROC PowerUp()
     VAR shapedata shrobot1;
     phome:=pPick;
     phome.trans.z:=pPick.trans.z+30;
     PosHome1:=phome.trans; 
     PosHome2:=phome.trans;
     PosHome1.X:=PosHome1.X-10;
     PosHome2.X:=PosHome2.X+10;
     PosHome1.Y:=PosHome1.y-10;
     PosHome2.Y:=PosHome2.Y+10;
     PosHome1.Z:=PosHome1.z-10;
     PosHome2.z:=PosHome2.z+10;
     SetSysData tGripper;
     SetSysData wobj0;
     WZBoxDef\Inside,shrobot1,PosHome1,PosHome2;
     WZDOSet\Stat,wzrobota1\Inside,shrobot1,doHomePos,1;
     TPWrite "The power on is ran";
   ENDPROC
    
  FUNC bool bCurPos(
    robtarget ComparePos,
    INOUT tooldata TCP,
    num nPosX,
     num nPosY,
     num nPosZ,
     inout wobjdata wobj)

    ! Function to compare current manipulator position with a given position
    VAR num Counter:=0;
    VAR robtarget ActualPos;
    ActualPos:=CRobT(\Tool:=TCP\WObj:=wobj);
    IF ActualPos.trans.x>ComparePos.trans.x-nPosX AND ActualPos.trans.x<ComparePos.trans.x+nPosX Counter:=Counter+1;
    IF ActualPos.trans.y>ComparePos.trans.y-nPosY AND ActualPos.trans.y<ComparePos.trans.y+nPosY Counter:=Counter+1;
    IF ActualPos.trans.z>ComparePos.trans.z-nPosZ AND ActualPos.trans.z<ComparePos.trans.z+nPosZ Counter:=Counter+1;
    IF ActualPos.rot.q1>ComparePos.rot.q1-0.1 AND ActualPos.rot.q1<ComparePos.rot.q1+0.1 Counter:=Counter+1;
    IF ActualPos.rot.q2>ComparePos.rot.q2-0.1 AND ActualPos.rot.q2<ComparePos.rot.q2+0.1 Counter:=Counter+1;
    IF ActualPos.rot.q3>ComparePos.rot.q3-0.1 AND ActualPos.rot.q3<ComparePos.rot.q3+0.1 Counter:=Counter+1;
    IF ActualPos.rot.q4>ComparePos.rot.q4-0.1 AND ActualPos.rot.q4<ComparePos.rot.q4+0.1 Counter:=Counter+1;
    RETURN Counter=7;
  ENDFUNC
  FUNC bool bCurrentPos(
    robtarget ComparePos,
    INOUT tooldata TCP)

    ! Function to compare current manipulator position with a given position
    VAR num Counter:=0;
    VAR robtarget ActualPos;

    ActualPos:=CRobT(\Tool:=TCP\WObj:=wobj0);
    IF ActualPos.trans.x>ComparePos.trans.x-150 AND ActualPos.trans.x<ComparePos.trans.x+150 Counter:=Counter+1;
    IF ActualPos.trans.y>ComparePos.trans.y-150 AND ActualPos.trans.y<ComparePos.trans.y+150 Counter:=Counter+1;
    IF ActualPos.trans.z>ComparePos.trans.z-150 AND ActualPos.trans.z<ComparePos.trans.z+150 Counter:=Counter+1;
    IF ActualPos.rot.q1>ComparePos.rot.q1-0.1 AND ActualPos.rot.q1<ComparePos.rot.q1+0.1 Counter:=Counter+1;
    IF ActualPos.rot.q2>ComparePos.rot.q2-0.1 AND ActualPos.rot.q2<ComparePos.rot.q2+0.1 Counter:=Counter+1;
    IF ActualPos.rot.q3>ComparePos.rot.q3-0.1 AND ActualPos.rot.q3<ComparePos.rot.q3+0.1 Counter:=Counter+1;
    IF ActualPos.rot.q4>ComparePos.rot.q4-0.1 AND ActualPos.rot.q4<ComparePos.rot.q4+0.1 Counter:=Counter+1;
    RETURN Counter=7;
  ENDFUNC
  !the rCalibtool is Updata the tool of the robot
 PROC rCalibTool()
    VAR pose poseCCD1;
    VAR pose poseTool;
    VAR num anglex;
    VAR num angley;
    VAR num anglez;
    !MoveJ pCCD1, v500, fine, tGripper;
    !SocketGet sCCD1;
    !data from camera 1
    !CCD1_X: the X value of the feature point in the world coordinate
    posRel.trans.x := X1;
    posRel.trans.y := Y1;
    !posRel.trans.z := 108;
    posRel.trans.z := pCCD1.trans.z;
    posRel.rot:=pCCD1.rot;
    anglez := 90+EulerZYX(\Z, pCCD1.rot);
    reg1 := anglez;
    !
    !nAngle:=anglez; ! delete for real test
    !posRel.rot := posRel.rot*OrientZYX(nAngle1-anglez,0,0);
    posRel.rot := posRel.rot*OrientZYX(-nAngle1+90-noffsangle+anglez,0,0);
    !poseCCD1: pose where to take picture
    poseCCD1.trans:=pCCD1.trans;
    poseCCD1.rot:=pCCD1.rot;
    tCurTool := tGripper;
    !calculate the actual tool data
    poseTool:=PoseMult(PoseInv(poseCCD1),posRel);
    poseTool:=PoseMult(tGripper.tframe,poseTool);
    !MoveJ pTemp, v1000, fine, tCurTool;
    !MoveJ reltool(pTemp,0,0,0\rz:=-180), v1000, fine, tCurTool;
    !poseTool.trans.z:=108;
    tCurtool.tframe.trans:=poseTool.trans;
    tCurtool.tframe.rot:=poseTool.rot;
  ENDPROC
      
ENDMODULE